import inverse_programming
import invp

# def func1():
#     obj = [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
#     newA = [
#         [0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 2.0, -2.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
#         [0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, -1.0, -2.0, 0.0, 0.0, 0.0, 0.0, 0.0],
#         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, -2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
#         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, -1.0, -4.0, 0.0, 0.0, 0.0, 0.0, 1.0],
#         [-1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
#         [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
#         [0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
#         [0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
#         [0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
#         [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
#         [0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
#         [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
#     sense = [0, 0, 0, 0, -1, 1, -1, 1, -1, 1, -1, 1]
#     rhs = [0.0, 0.0, 0.0, 0.0, -2.0, -2.0, 3.0, 3.0, -6.0, -6.0, -1.0, -1.0]
#     lb = [0, 0, 0, 0, -100000000, -100000000, -100000000, -100000000, 0, 0, 0, -100000000, -100000000, -100000000, 0, 0]
#     m = len(newA)
#     n = len(obj)
#     v = 4
#     con = 8
#     return invp.solve_tool_inverse_cost_vector(m, n, v, con, obj, newA, sense, rhs, lb, 'gurobi')
#
#
# def func2():
#     m = 30
#     n = 26
#     nbin = 5
#     nx = n - nbin
#     obj = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]
#     A = [[3, 4, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#          [3, 2, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#          [6, -2, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#          [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 6, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#          [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 6, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100000, 0, 0, 0, 0],
#          [0, 0, 0, 0, 0, 0, 0, 0, 4, 2, -2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#          [0, 0, 0, 0, 0, 0, 0, 0, 4, 2, -2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100000, 0, 0, 0],
#          [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#          [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100000, 0, 0],
#          [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#          [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100000, 0],
#          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100000],
#          [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100000, 0, 0, 0, 0],
#          [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100000, 0, 0, 0],
#          [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100000, 0, 0],
#          [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100000, 0],
#          [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100000],
#          [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#          [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#          [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#          [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#          [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0],
#          [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
#          [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0],
#          [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
#          [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0],
#          [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
#          [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0],
#          [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]]
#     rhs = list(map(float,
#                    [0, 0, 0, 0, 0, 0, 0, 0, 100000, 100000, 100000, 100000, 100000, 0, 0, 0, 0, 0, -1, -1, 2 / 3, 2 / 3,
#                     5, 5, 2, 2, 0, 0, 0, 0]))
#     sense = [0, 0, 0, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]
#     bounds = [[0, 100000], [0, 100000], [0, 100000], [0, 100000],
#               [0, 100000], [-100000, 100000], [-100000, 100000], [-100000, 100000], [-100000, 100000],
#               [-100000, 100000], [-100000, 100000], [-100000, 100000], [-100000, 100000], [-100000, 100000],
#               [-100000, 100000], [-100000, 100000], [0, 100000], [0, 100000], [0, 100000], [0, 100000], [0, 100000],
#               [0, 1], [0, 1], [0, 1], [0, 1], [0, 1]]
#     return invp.solve_tool_inverse_MPEC(m, n, nx, nbin, obj, A, sense, rhs, bounds, 'gurobi')
#
#
# def func3():
#     M = 10000
#     A = [[0.0, 0.0, 1.0, 0.0, 0.0, -1.1250000042650754e-08, 0.0],
#          [0.0, 0.0, 1.0, 0.0, 0.0, -88888888.0, 0.0],
#          [0.0, -1.0, 0.0, 0.0, 3.0, 0.0, 0.0],
#          [-1.0, 0.0, 0.0, 0.0, 1.0, 88888888.0, 0.0],
#          [-1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
#          [0.0, -1.0, 0.0, 0.0, 3.0, 0.0, 0.0],
#          [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
#          [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
#          [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]]
#     rhs = [[0.0, 1.0],
#            [0.0, -1.0],
#            [0.0, 0.0],
#            [88888888.0, -1.0],
#            [0.0, 1.0],
#            [0.0, 1.0],
#            [0.0, 0.0],
#            [0.0, 1.0],
#            [1.0, 0.0]]
#     m = 9
#     n = 7
#     nx = 5
#     nz = 2
#     return invp.solve_tool_partial_inverse(m, n, nx, nz, A, rhs)


if __name__ == '__main__':
    coefficients = [1, 2, 3, 4]
    constraint_matrix = [[1, 2, 3], [2, 3, 4]]
    right_side_matrix = [[1, 2], [2, 3]]
    bounds = [[1, 2], [2, 3]]
    i = invp.to_standard_form(coefficients, constraint_matrix, right_side_matrix, bounds)
    print(i)

    # inf = invp.inf
    # undefined = invp.undefined
    #
    # res = invp.get_partial_problem_model(A, b, x0)
    # for i in res:
    #     if type(i) == list:
    #         for j in i:
    #             print(str(j))
    #     else:
    #         print(str(i))
    #     print()
    # print("1:", func1())
    # print("2:", func2())
    # print("3:", func3())
